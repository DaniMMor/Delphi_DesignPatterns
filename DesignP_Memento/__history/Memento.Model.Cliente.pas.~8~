unit Memento.Model.Cliente;

interface

uses
  Memento.Model.Interfaces;

type
   TModelCliente = class(TInterfacedObject, iCliente, iMemento<iCliente>)
      private
        FNome : string;
        function GetNome : string;
        procedure SetNome(const value : string);
      public
         constructor Create ;
         destructor Destroy ; override;
         class function New: iCliente;
         property Nome : string read GetNome write SetNome;
         function Memento : iMemento<iCliente>;
         function Save(key : string) : iMemento<iCliente>;
         function Restore(key : string) : iCliente;

end;

implementation

{ TModelCliente }

constructor TModelCliente.Create;
begin

end;

destructor TModelCliente.Destroy;
begin

  inherited;
end;

function TModelCliente.GetNome: string;
begin
  Result := FNome;
end;

function TModelCliente.Memento: iMemento<iCliente>;
begin

end;

class function TModelCliente.New: iCliente;
begin
  Result := Self.Create;
end;

procedure TModelCliente.SetNome(const value: string);
begin
   FNome := value;
end;

end.
